import asyncio
import logging
import os
import json
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage  # –í—Ä–µ–º–µ–Ω–Ω–æ; –ø–æ—Ç–æ–º Redis/PostgreSQL
import asyncpg  # –î–ª—è –ë–î (Yandex PostgreSQL)
import nest_asyncio

# –î–ª—è AI: YandexGPT (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API key)
# from openai import AsyncOpenAI  # YandexGPT —Å–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI API
# client = AsyncOpenAI(base_url="https://llm.api.cloud.yandex.net/foundationModels/v1/completion", api_key=os.getenv("YANDEX_API_KEY"))

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
nest_asyncio.apply()

# States for conversation (—Ä–∞—Å—à–∏—Ä–∏–ª–∏ –¥–ª—è AI)
class RealtyStates(StatesGroup):
    asking_location = State()
    asking_property_type = State()
    asking_budget = State()
    asking_rooms = State()
    recommending = State()  # –ù–æ–≤–æ–µ: –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    details = State()  # –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö

# –ë–î config (Yandex Managed PostgreSQL)
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'your-db.host.yandexcloud.net'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME', 'realty_db'),
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ? –ù–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ process_event –¥–ª—è stateless
async def get_bot_dp():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN environment variable is not set")
    
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ PostgreSQLStorage –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    dp = Dispatcher(storage=storage)
    
    # Router
    router = Router()
    dp.include_router(router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–∑–¥–µ—Å—å –∂–µ, —á—Ç–æ–±—ã stateless)
    register_handlers(router)
    
    return bot, dp

def register_handlers(router: Router):
    @router.message(CommandStart())
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        logger.info(f"Received /start from {message.from_user.id}")
        await state.clear()
        user_id = message.from_user.id
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
        await save_user_to_db(user_id, "new_session")
        
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
            "–Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –≤ –ì—Ä—É–∑–∏–∏ (–ê–¥–∂–∞—Ä–∏—è, –ß–∞–∫–≤–∏).\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞ —É –º–æ—Ä—è, –±—é–¥–∂–µ—Ç, –∫–æ–º–Ω–∞—Ç—ã?\n\n"
            "–ò–ª–∏ /find –¥–ª—è –æ–ø—Ä–æ—Å–∞."
        )

    @router.message(Command("help"))
    async def command_help_handler(message: Message) -> None:
        await message.answer(
            "ü§ñ –ü–æ–º–æ—â—å:\n"
            "/start - –°—Ç–∞—Ä—Ç\n"
            "/find - –û–ø—Ä–æ—Å\n"
            "/help - –≠—Ç–æ\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ò—â—É –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏ –¥–æ 100k$'"
        )

    @router.message(Command("find"))
    async def command_find_handler(message: Message, state: FSMContext) -> None:
        await state.set_state(RealtyStates.asking_location)
        await message.answer("üìç –ì–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω? (e.g., –ß–∞–∫–≤–∏, –ê–¥–∂–∞—Ä–∏—è)")

    @router.message(F.text)
    async def handle_text_message(message: Message, state: FSMContext) -> None:
        user_id = message.from_user.id
        current_state = await state.get_state()
        text = message.text.lower()
        
        logger.info(f"Text from {user_id}: {text}")
        
        if current_state:
            if current_state == RealtyStates.asking_location.state:
                await handle_location_response(message, state)
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ handle_ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ, –Ω–æ —Å –ë–î)
            elif current_state == RealtyStates.recommending.state:
                await handle_ai_recommendation(message, state, text)
        else:
            # Free text: AI-–∞–Ω–∞–ª–∏–∑
            await handle_free_text_request(message, state)

    # ... (handle_location_response, handle_property_type_response –∏ —Ç.–¥. ‚Äî –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ, –Ω–æ –¥–æ–±–∞–≤—å—Ç–µ await save_dialog_to_db(user_id, text) –≤ –∫–∞–∂–¥—ã–π)

    async def handle_free_text_request(message: Message, state: FSMContext) -> None:
        user_id = message.from_user.id
        text = message.text
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥
        await save_dialog_to_db(user_id, text)
        
        # AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞; –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ YandexGPT)
        recommendations = await get_ai_recommendations(text)  # RAG query
        
        await state.set_state(RealtyStates.recommending)
        await message.answer(
            f"üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{text}':\n\n"
            f"{recommendations}\n\n"
            "–£—Ç–æ—á–Ω–∏—Ç–µ? (e.g., '–§–æ—Ç–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤')"
        )

    async def handle_ai_recommendation(message: Message, state: FSMContext, query: str) -> None:
        # AI-–¥–∏–∞–ª–æ–≥
        response = await query_yandex_gpt(query, context="–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏")  # RAG + GPT
        await save_dialog_to_db(message.from_user.id, query, response)
        await message.answer(response)
        if "–∫—É–ø–∏—Ç—å" in query:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: https://akoukounov.sourcecraft.site/realty-landing/")

# –ë–î —Ñ—É–Ω–∫—Ü–∏–∏ (asyncpg)
async def get_db_pool():
    return await asyncpg.create_pool(**DB_CONFIG)

async def save_user_to_db(user_id: int, session_info: str):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO users (id, session_info) VALUES ($1, $2) ON CONFLICT (id) DO UPDATE SET session_info = $2",
            user_id, session_info
        )

async def save_dialog_to_db(user_id: int, user_msg: str, bot_msg: str = None):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO dialogs (user_id, user_msg, bot_msg, timestamp) VALUES ($1, $2, $3, NOW())",
            user_id, user_msg, bot_msg
        )

async def get_ai_recommendations(query: str) -> str:
    # RAG: Query pgvector
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        # –ü—Ä–∏–º–µ—Ä: similarity search –ø–æ embeddings
        row = await conn.fetchrow(
            "SELECT content FROM properties ORDER BY embedding <=> $1 LIMIT 1",
            query  # –í —Ä–µ–∞–ª–µ: embed(query) via sentence-transformers
        )
        if row:
            return f"üè† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {row['content']}\n–¶–µ–Ω–∞: 150k GEL\n–§–æ—Ç–æ: [URL]"
    return "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏, —É–ª. –ë–∞—Ç—É–º—Å–∫–∞—è 16–ê. –ë—é–¥–∂–µ—Ç –æ—Ç 100k$."

async def query_yandex_gpt(prompt: str, context: str) -> str:
    # –ó–∞–≥–ª—É—à–∫–∞; —Ä–µ–∞–ª: client.chat.completions.create
    return f"–ù–∞ –æ—Å–Ω–æ–≤–µ {context}: {prompt} ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ."

# Process event (–æ—Å–Ω–æ–≤–Ω–æ–π handler –¥–ª—è CF)
async def process_event(event, context):
    try:
        logger.info(f"Event: {event}")
        update_data = json.loads(event['body'])
        
        bot, dp = await get_bot_dp()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤
        await dp.feed_raw_update(bot, update_data)
        
        # Graceful shutdown: –ñ–¥—ë–º pending tasks
        await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è cleanup
        
        return {'statusCode': 200, 'body': 'OK'}
    except Exception as e:
        logger.error(f"Process error: {e}", exc_info=True)
        return {'statusCode': 500, 'body': str(e)}
    finally:
        # –ó–∞–∫—Ä—ã—Ç—å bot/dp
        if 'bot' in locals():
            await bot.session.close()

# Local test
async def main():
    bot, dp = await get_bot_dp()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())