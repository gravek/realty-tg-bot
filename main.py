import asyncio
import logging
import os
import json
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# States for conversation
class RealtyStates(StatesGroup):
    asking_location = State()
    asking_property_type = State()
    asking_budget = State()
    asking_rooms = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (stateless –¥–ª—è serverless)
async def get_bot_dp():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN environment variable is not set")
    
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –±–µ–∑ –ë–î
    dp = Dispatcher(storage=storage)
    
    # Router
    router = Router()
    dp.include_router(router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    @router.message(CommandStart())
    async def command_start_handler(message: Message, state: FSMContext) -> None:
        logger.info(f"Received /start from {message.from_user.id}")
        await state.clear()
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
            "–Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –≤ –ì—Ä—É–∑–∏–∏ (–ê–¥–∂–∞—Ä–∏—è, –ß–∞–∫–≤–∏).\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞ —É –º–æ—Ä—è, –±—é–¥–∂–µ—Ç, –∫–æ–º–Ω–∞—Ç—ã?\n\n"
            "–ò–ª–∏ /find –¥–ª—è –æ–ø—Ä–æ—Å–∞."
        )

    @router.message(Command("help"))
    async def command_help_handler(message: Message) -> None:
        await message.answer(
            "ü§ñ –ü–æ–º–æ—â—å:\n"
            "/start - –°—Ç–∞—Ä—Ç\n"
            "/find - –û–ø—Ä–æ—Å\n"
            "/help - –≠—Ç–æ\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ò—â—É –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏ –¥–æ 100k$'"
        )

    @router.message(Command("find"))
    async def command_find_handler(message: Message, state: FSMContext) -> None:
        await state.set_state(RealtyStates.asking_location)
        await message.answer("üìç –ì–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω? (e.g., –ß–∞–∫–≤–∏, –ê–¥–∂–∞—Ä–∏—è)")

    @router.message(F.text)
    async def handle_text_message(message: Message, state: FSMContext) -> None:
        user_id = message.from_user.id
        current_state = await state.get_state()
        text = message.text.lower()
        
        logger.info(f"Text from {user_id}: {text}")
        
        if current_state:
            if current_state == RealtyStates.asking_location.state:
                await handle_location_response(message, state)
            elif current_state == RealtyStates.asking_property_type.state:
                await handle_property_type_response(message, state)
            elif current_state == RealtyStates.asking_budget.state:
                await handle_budget_response(message, state)
            elif current_state == RealtyStates.asking_rooms.state:
                await handle_rooms_response(message, state)
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        else:
            await handle_free_text_request(message)

    async def handle_location_response(message: Message, state: FSMContext) -> None:
        location = message.text
        await state.update_data(location=location)
        await state.set_state(RealtyStates.asking_property_type)
        await message.answer(
            f"üìç –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {location}\n\n"
            "üè† –ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏? (e.g., –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã)"
        )

    async def handle_property_type_response(message: Message, state: FSMContext) -> None:
        property_type = message.text
        await state.update_data(property_type=property_type)
        await state.set_state(RealtyStates.asking_budget)
        await message.answer(
            f"üè† –¢–∏–ø: {property_type}\n\n"
            "üí∞ –ë—é–¥–∂–µ—Ç? (e.g., 100k$ –∏–ª–∏ 5000000 —Ä—É–±)"
        )

    async def handle_budget_response(message: Message, state: FSMContext) -> None:
        budget = message.text
        await state.update_data(budget=budget)
        await state.set_state(RealtyStates.asking_rooms)
        await message.answer(
            f"üí∞ –ë—é–¥–∂–µ—Ç: {budget}\n\n"
            "üõè –°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç? (e.g., 1, 2, —Å—Ç—É–¥–∏—è)"
        )

    async def handle_rooms_response(message: Message, state: FSMContext) -> None:
        rooms = message.text
        user_data = await state.get_data()
        location = user_data.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        property_type = user_data.get("property_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        budget = user_data.get("budget", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        await state.clear()
        
        await message.answer(
            f"üõè –°–ø–∞—Å–∏–±–æ!\n\n"
            f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"üìç {location}\n"
            f"üè† {property_type}\n"
            f"üí∞ {budget}\n"
            f"üõè {rooms}\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏, —É–ª. –ë–∞—Ç—É–º—Å–∫–∞—è 16–ê. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://akoukounov.sourcecraft.site/realty-landing/"
        )

    async def handle_free_text_request(message: Message) -> None:
        text = message.text
        await message.answer(
            f"üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{text}':\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ß–∞–∫–≤–∏, —É–ª. –ë–∞—Ç—É–º—Å–∫–∞—è 16–ê.\n"
            "–¶–µ–Ω–∞: –æ—Ç 100k$. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://akoukounov.sourcecraft.site/realty-landing/"
        )

    return bot, dp

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Yandex Cloud Functions
async def process_event(event, context):
    try:
        logger.info(f"Event: {event}")
        update_data = json.loads(event['body'])
        
        bot, dp = await get_bot_dp()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤
        await dp.feed_raw_update(bot, update_data)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        await asyncio.sleep(0.1)
        
        return {'statusCode': 200, 'body': 'OK'}
    except Exception as e:
        logger.error(f"Process error: {e}", exc_info=True)
        return {'statusCode': 500, 'body': str(e)}
    finally:
        if 'bot' in locals():
            await bot.session.close()

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async def main():
    bot, dp = await get_bot_dp()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())