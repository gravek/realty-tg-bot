import asyncio
import logging
import os
import json
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.methods import SetWebhook

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Router for handling messages
router = Router()
dp.include_router(router)

# States for conversation
class RealtyStates(StatesGroup):
    asking_location = State()
    asking_property_type = State()
    asking_budget = State()
    asking_rooms = State()

# In-memory storage for user data (in production, use a database)
user_states = {}
user_preferences = {}

# Command handlers
@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    # Reset user state
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_preferences:
        del user_preferences[user_id]
    
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã

"
        "–Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –∂–∏–ª—å–µ, "
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –±—é–¥–∂–µ—Ç—É.

"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤—ã –∏—â–µ—Ç–µ, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.

"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"
        "- "–ò—â—É –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ú–æ—Å–∫–≤–µ, –±—é–¥–∂–µ—Ç 5 –º–ª–Ω"
"
        "- "–ù—É–∂–µ–Ω –¥–æ–º –≤ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ –¥–æ 10 –º–ª–Ω"
"
        "- "–•–æ—á—É —Å—Ç—É–¥–∏—é –≤ —Ü–µ–Ω—Ç—Ä–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞"

"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /find –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞."
    )

@router.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    await message.answer(
        "ü§ñ –Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏

"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
"
        "/find - –ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
"
        "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

"
        "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤—ã –∏—â–µ—Ç–µ, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
    )

@router.message(Command("find"))
async def command_find_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    await state.set_state(RealtyStates.asking_location)
    await message.answer("üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞–π–æ–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?")

# Handle free text requests
@router.message(F.text)
async def handle_text_message(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    # If user is in a conversation state, handle accordingly
    if current_state:
        if current_state == RealtyStates.asking_location.state:
            await handle_location_response(message, state)
        elif current_state == RealtyStates.asking_property_type.state:
            await handle_property_type_response(message, state)
        elif current_state == RealtyStates.asking_budget.state:
            await handle_budget_response(message, state)
        elif current_state == RealtyStates.asking_rooms.state:
            await handle_rooms_response(message, state)
        else:
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏."
            )
    else:
        # Handle free text request
        await handle_free_text_request(message)

async def handle_free_text_request(message: Message) -> None:
    user_text = message.text
    await message.answer(
        f"üîç –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: "{user_text}"

"
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:

"
        "üè† –í–∞—Ä–∏–∞–Ω—Ç 1: 
"
        "- –¢–∏–ø: –ö–≤–∞—Ä—Ç–∏—Ä–∞
"
        "- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞, —Ä–∞–π–æ–Ω –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
"
        "- –¶–µ–Ω–∞: 4 800 000 ‚ÇΩ
"
        "- –ü–ª–æ—â–∞–¥—å: 45 –º¬≤
"
        "- –ö–æ–º–Ω–∞—Ç: 1
"
        "- [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç

"
        "üèò –í–∞—Ä–∏–∞–Ω—Ç 2:
"
        "- –¢–∏–ø: –ö–≤–∞—Ä—Ç–∏—Ä–∞
"
        "- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞, —Ä–∞–π–æ–Ω –°–µ–≤–µ—Ä–Ω—ã–π
"
        "- –¶–µ–Ω–∞: 5 200 000 ‚ÇΩ
"
        "- –ü–ª–æ—â–∞–¥—å: 52 –º¬≤
"
        "- –ö–æ–º–Ω–∞—Ç: 2
"
        "- [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç

"
        "üè¢ –í–∞—Ä–∏–∞–Ω—Ç 3:
"
        "- –¢–∏–ø: –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
"
        "- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞, —Ä–∞–π–æ–Ω –ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π
"
        "- –¶–µ–Ω–∞: 6 500 000 ‚ÇΩ
"
        "- –ü–ª–æ—â–∞–¥—å: 65 –º¬≤
"
        "- –ö–æ–º–Ω–∞—Ç: 2
"
        "- [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç

"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤? –ù–∞–ø–∏—à–∏—Ç–µ /find –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
    )

async def handle_location_response(message: Message, state: FSMContext) -> None:
    location = message.text
    await state.update_data(location=location)
    await state.set_state(RealtyStates.asking_property_type)
    await message.answer(
        f"üìç –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {location}

"
        "üè† –ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º, –∫–æ–º–Ω–∞—Ç–∞, —Ç–∞—É–Ω—Ö–∞—É—Å, –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã"
    )

async def handle_property_type_response(message: Message, state: FSMContext) -> None:
    property_type = message.text
    await state.update_data(property_type=property_type)
    await state.set_state(RealtyStates.asking_budget)
    await message.answer(
        f"üè† –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {property_type}

"
        "üí∞ –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.
"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 5000000 –∏–ª–∏ 5 –º–ª–Ω"
    )

async def handle_budget_response(message: Message, state: FSMContext) -> None:
    budget_text = message.text
    # Simple budget processing
    budget = budget_text
    if "–º–ª–Ω" in budget_text.lower():
        try:
            num = float("".join(filter(str.isdigit, budget_text)))
            budget = int(num * 1000000)
        except ValueError:
            pass
    
    await state.update_data(budget=budget)
    await state.set_state(RealtyStates.asking_rooms)
    await message.answer(
        f"üí∞ –ë—é–¥–∂–µ—Ç: {budget} ‚ÇΩ

"
        "üõè –°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ?
"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3, —Å—Ç—É–¥–∏—è"
    )

async def handle_rooms_response(message: Message, state: FSMContext) -> None:
    rooms = message.text
    user_data = await state.get_data()
    
    # Get all preferences
    location = user_data.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    property_type = user_data.get("property_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    budget = user_data.get("budget", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # Clear state
    await state.clear()
    
    # Provide recommendations
    try:
        budget_num = int(budget)
        price_95 = round(budget_num * 0.95)
        price_100 = round(budget_num)
        price_105 = round(budget_num * 1.05)
    except (ValueError, TypeError):
        price_95 = price_100 = price_105 = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    
    area_range = "40-55" if rooms in ["1", "—Å—Ç—É–¥–∏—è"] else "60-90"
    
    await message.answer(
        f"üõè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!

"
        f"–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:
"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}
"
        f"üè† –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {property_type}
"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {budget} ‚ÇΩ
"
        f"üõè –ö–æ–º–Ω–∞—Ç: {rooms}

"
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:

"
        f"üè† –í–∞—Ä–∏–∞–Ω—Ç 1: 
"
        f"- {property_type} –≤ {location}
"
        f"- –¶–µ–Ω–∞: {price_95:,} ‚ÇΩ
"
        f"- –ü–ª–æ—â–∞–¥—å: {area_range} –º¬≤
"
        f"- [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç

"
        f"üèò –í–∞—Ä–∏–∞–Ω—Ç 2:
"
        f"- {property_type} –≤ {location}
"
        f"- –¶–µ–Ω–∞: {price_100:,} ‚ÇΩ
"
        f"- –ü–ª–æ—â–∞–¥—å: {area_range} –º¬≤
"
        f"- [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç

"
        f"üè¢ –í–∞—Ä–∏–∞–Ω—Ç 3:
"
        f"- {property_type} –≤ {location}
"
        f"- –¶–µ–Ω–∞: {price_105:,} ‚ÇΩ
"
        f"- –ü–ª–æ—â–∞–¥—å: {area_range} –º¬≤
"
        f"- [–ü–æ–¥—Ä–æ–±–Ω–µ–µ] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç

"
        f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ /find –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
    )

# Handler for AWS Lambda or Yandex Cloud Functions
async def process_event(event, context):
    """
    Process event from Yandex Cloud Functions
    """
    try:
        # Parse update from event body
        update_data = json.loads(event['body'])
        
        # Process update
        update = dp.resolve_update(update_data)
        await dp.feed_update(bot, update)
        
        return {
            'statusCode': 200,
            'body': ''
        }
    except Exception as e:
        logging.error(f"Error processing event: {e}")
        return {
            'statusCode': 500,
            'body': str(e)
        }

# For local testing
async def main():
    # Set webhook for Telegram
    webhook_url = os.environ.get("WEBHOOK_URL")
    if webhook_url:
        await bot(SetWebhook(url=webhook_url))
        logging.info(f"Webhook set to {webhook_url}")
    
    # Start polling (for local testing)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())